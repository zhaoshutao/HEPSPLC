<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="PS2" Id="{cad729a9-7a37-4c98-b99d-56fded9b8992}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PS2
VAR
	CoilName:STRING:='';
	AutoOrManualMode:BOOL;
	AutoMode:BOOL;
	ManualMode:BOOL:=FALSE;
	CoilError: BOOL;
	CoilErrorId: INT;
	CoilErrorDescription: STRING;
	//
	IPAddr:STRING:='';
	TCPPort:UINT:=0;
	//获取电源版本信息
	fb_GetPSVersion: FB_MBReadRegs;
	PSVersion_MBAddr:WORD:=16#80;//寄存器地址
	PSVersion_PSProtocal:ARRAY[0..1] OF WORD;//从PS获取到的WORD
	PSVersion_PSProtocal_LowByte:ARRAY[0..1] OF WORD;//格式转换
	PSVersion_PSProtocal_HighByte:ARRAY[0..1] OF WORD;//格式转换
	PSVersion_Word:ARRAY[0..1] OF WORD;//PLC系统
	PSVersion:STRING;
	btn_GetPSVersion: BOOL;
	GetPSVersion_RTRIG:R_TRIG;
	GetPSVersion_TON:TON;
	
	//获取电源状态
	fb_GetPSStatus: FB_MBReadRegs;
	PSStatus_MBAddr:WORD:=16#90;//寄存器地址
	PSStatus_PSProtocal:ARRAY[0..1] OF WORD;//从PS获取到的WORD
	PSStatus_PSProtocal_LowByte:ARRAY[0..1] OF WORD;//格式转换
	PSStatus_PSProtocal_HighByte:ARRAY[0..1] OF WORD;//格式转换
	PSStatus:ARRAY[0..1] OF WORD;//PLC系统
	btn_GetPSStatus: BOOL;
	GetPSStatus_RTRIG:R_TRIG;
	GetPSStatus_TON:TON;
	PSStatus_List :ARRAY[0..31] OF BOOL;
	st_Power_ChA: BOOL;
	st_EStop_ChA:BOOL;
	st_Fault_ChA:BOOL;
	st_Power_ChB: BOOL;
	st_EStop_ChB:BOOL;
	st_Fault_ChB:BOOL;
	st_LocalOrRemote:BOOL;
	st_Reset:BOOL;
	//
	//ChA
	//
	//电源开-ChA
	fb_PowerOn_ChA: FB_MBWriteRegs;
	PowerOn_ChA_MBAddr:WORD:=16#56C;//寄存器地址
	PowerOn_ChARegs:WORD:=16#200;//寄存器数据
	btn_PowerOn_ChA:BOOL;
	PowerOn_ChA_State:DINT;
	PowerOn_ChA_TON:TON;
	PowerOn_ChA_TON2:TON;
	fb_PowerOn_ChA_ResetReg: FB_MBWriteRegs;
	PowerOn_ChA_ResetRegs:WORD:=16#0;
	btn_PowerOn_ChA_ResetRegs:BOOL;
	//电源关_ChA
	fb_PowerOff_ChA: FB_MBWriteRegs;	
	PowerOff_ChA_MBAddr:WORD:=16#56C;//寄存器地址
	PowerOff_ChARegs:WORD:=16#100;
	btn_PowerOff_ChA:BOOL;
	PowerOff_ChA_State:DINT;
	PowerOff_ChA_TON:TON;
	fb_PowerOff_ChA_ResetReg: FB_MBWriteRegs;
	PowerOff_ChA_ResetRegs:WORD:=16#0;
	btn_PowerOff_ChA_ResetRegs:BOOL;
	//复位-ChA
	fb_Reset_ChA: FB_MBWriteRegs;
	Reset_ChA_MBAddr:WORD:=16#56C;//寄存器地址
	Reset_ChARegs:WORD:=16#400;//寄存器数据
	btn_Reset_ChA:BOOL;
	Reset_ChA_State:DINT;
	Reset_ChA_TON:TON;
	fb_Reset_ChA_ResetReg: FB_MBWriteRegs;
	Reset_ChA_ResetRegs:WORD:=16#0;
	btn_Reset_ChA_ResetRegs:BOOL;
	//设定电流_ChA
	fb_SetCurrent_ChA: FB_MBWriteRegs;		
	SetCurrent_ChA_MBAddr:WORD:=16#540;//寄存器地址
	SetCurrent_ChA:REAL;//PLC输入float型
	SetCurrent_ChARegs:ARRAY[0..1] OF WORD;//Unoin转换，float为WORD
	SetCurrent_ChARegs_LowByte:ARRAY[0..1] OF WORD;//取低字节
	SetCurrent_ChARegs_HighByte:ARRAY[0..1] OF WORD;//取高字节
	SetCurrent_ChARegs_PSProtocal:ARRAY[0..1] OF WORD;//重新拼接成电源协议
	btn_SetCurrent_ChA:BOOL;
	SetCurrent_ChA_State:DINT;
	SetCurrent_ChA_TON:TON;
	ieee754_SetCurrent_ChA:IEEE754_Convert;
	//设定Ramping速度_ChA
	fb_SetRampingSpd_ChA: FB_MBWriteRegs;		
	SetRampingSpd_ChA_MBAddr:WORD:=16#57C;//寄存器地址
	SetRampingSpd_ChA:REAL;//PLC输入float型
	SetRampingSpd_ChARegs:ARRAY[0..1] OF WORD;//Unoin转换，float为WORD
	SetRampingSpd_ChARegs_LowByte:ARRAY[0..1] OF WORD;//取低字节
	SetRampingSpd_ChARegs_HighByte:ARRAY[0..1] OF WORD;//取高字节
	SetRampingSpd_ChARegs_PSProtocal:ARRAY[0..1] OF WORD;//重新拼接成电源协议
	btn_SetRampingSpd_ChA:BOOL;
	SetRampingSpd_ChA_State:DINT;
	SetRampingSpd_ChA_TON:TON;
	ieee754_SetRampingSpd_ChA:IEEE754_Convert;
	//获取当前电流值_ChA
	fb_GetCurrent_ChA: FB_MBReadRegs;		
	GetCurrent_ChA_MBAddr:WORD:=16#94;//寄存器地址
	GetCurrent_ChARegs_PSProtocal:ARRAY[0..1] OF WORD;//从PS获取到的WORD
	GetCurrent_ChARegs_PSProtocal_LowByte:ARRAY[0..1] OF WORD;//格式转换
	GetCurrent_ChARegs_PSProtocal_HighByte:ARRAY[0..1] OF WORD;//格式转换
	GetCurrent_ChARegs:ARRAY[0..1] OF WORD;
	btn_GetCurrent_ChA:BOOL;
	GetCurrent_ChA_RTRIG:R_TRIG;
	GetCurrent_ChA_TON:TON;
	GetCurrent_ChA:REAL;
	ieee754_GetCurrent_ChA:IEEE754_Convert;
	//获取当前电压值_ChA
	fb_GetVoltage_ChA: FB_MBReadRegs;		
	GetVoltage_ChA_MBAddr:WORD:=16#84;//寄存器地址
	GetVoltage_ChARegs_PSProtocal:ARRAY[0..1] OF WORD;//从PS获取到的WORD
	GetVoltage_ChARegs_PSProtocal_LowByte:ARRAY[0..1] OF WORD;//格式转换
	GetVoltage_ChARegs_PSProtocal_HighByte:ARRAY[0..1] OF WORD;//格式转换
	GetVoltage_ChARegs:ARRAY[0..1] OF WORD;
	btn_GetVoltage_ChA:BOOL;
	GetVoltage_ChA_RTRIG:R_TRIG;
	GetVoltage_ChA_TON:TON;
	GetVoltage_ChA:REAL;
	ieee754_GetVoltage_ChA:IEEE754_Convert;
	//获取当前电流ramping速度_CHA
	fb_GetRampingSpd_ChA: FB_MBReadRegs;		
	GetRampingSpd_ChA_MBAddr:WORD:=16#A8;//寄存器地址
	GetRampingSpd_ChARegs_PSProtocal:ARRAY[0..1] OF WORD;//从PS获取到的WORD
	GetRampingSpd_ChARegs_PSProtocal_LowByte:ARRAY[0..1] OF WORD;//格式转换
	GetRampingSpd_ChARegs_PSProtocal_HighByte:ARRAY[0..1] OF WORD;//格式转换
	GetRampingSpd_ChARegs:ARRAY[0..1] OF WORD;
	btn_GetRampingSpd_ChA:BOOL;
	GetRampingSpd_ChA_RTRIG:R_TRIG;
	GetRampingSpd_ChA_TON:TON;
	GetRampingSpd_ChA:REAL;
	ieee754_GetRampingSpd_ChA:IEEE754_Convert;
	//获取设定电流值_ChA
	fb_GetSetCurrent_ChA: FB_MBReadRegs;			
	GetSetCurrent_ChA_MBAddr:WORD:=16#140;//寄存器地址
	GetSetCurrent_ChARegs_PSProtocal:ARRAY[0..1] OF WORD;//从PS获取到的WORD
	GetSetCurrent_ChARegs_PSProtocal_LowByte:ARRAY[0..1] OF WORD;//格式转换
	GetSetCurrent_ChARegs_PSProtocal_HighByte:ARRAY[0..1] OF WORD;//格式转换
	GetSetCurrent_ChARegs:ARRAY[0..1] OF WORD;
	btn_GetSetCurrent_ChA:BOOL;
	GetSetCurrent_ChA_RTRIG:R_TRIG;
	GetSetCurrent_ChA_TON:TON;
	GetSetCurrent_ChA:REAL;
	ieee754_GetSetCurrent_ChA:IEEE754_Convert;
	//
	//ChB
	//	
	//电源开-ChB
	fb_PowerOn_ChB: FB_MBWriteRegs;
	PowerOn_ChB_MBAddr:WORD:=16#56C;//寄存器地址
	PowerOn_ChBRegs:WORD:=16#2;//寄存器数据
	btn_PowerOn_ChB:BOOL;
	PowerOn_ChB_State:DINT;
	PowerOn_ChB_TON:TON;
	PowerOn_ChB_TON2:TON;
	fb_PowerOn_ChB_ResetReg: FB_MBWriteRegs;
	PowerOn_ChB_ResetRegs:WORD:=16#0;
	btn_PowerOn_ChB_ResetRegs:BOOL;
	//电源关_ChB
	fb_PowerOff_ChB: FB_MBWriteRegs;	
	PowerOff_ChB_MBAddr:WORD:=16#56C;//寄存器地址
	PowerOff_ChBRegs:WORD:=16#1;
	btn_PowerOff_ChB:BOOL;
	PowerOff_ChB_State:DINT;
	PowerOff_ChB_TON:TON;
	fb_PowerOff_ChB_ResetReg: FB_MBWriteRegs;
	PowerOff_ChB_ResetRegs:WORD:=16#0;
	btn_PowerOff_ChB_ResetRegs:BOOL;
	//复位-ChB
	fb_Reset_ChB: FB_MBWriteRegs;
	Reset_ChB_MBAddr:WORD:=16#56C;//寄存器地址
	Reset_ChBRegs:WORD:=16#4;//寄存器数据
	btn_Reset_ChB:BOOL;
	Reset_ChB_State:DINT;
	Reset_ChB_TON:TON;
	fb_Reset_ChB_ResetReg: FB_MBWriteRegs;
	Reset_ChB_ResetRegs:WORD:=16#0;
	btn_Reset_ChB_ResetRegs:BOOL;
	//设定电流_ChB
	fb_SetCurrent_ChB: FB_MBWriteRegs;		
	SetCurrent_ChB_MBAddr:WORD:=16#570;//寄存器地址
	SetCurrent_ChB:REAL;//PLC输入float型
	SetCurrent_ChBRegs:ARRAY[0..1] OF WORD;//Unoin转换，float为WORD
	SetCurrent_ChBRegs_LowByte:ARRAY[0..1] OF WORD;//取低字节
	SetCurrent_ChBRegs_HighByte:ARRAY[0..1] OF WORD;//取高字节
	SetCurrent_ChBRegs_PSProtocal:ARRAY[0..1] OF WORD;//重新拼接成电源协议
	btn_SetCurrent_ChB:BOOL;
	SetCurrent_ChB_State:DINT;
	SetCurrent_ChB_TON:TON;
	ieee754_SetCurrent_ChB:IEEE754_Convert;
	//设定Ramping速度_ChB
	fb_SetRampingSpd_ChB: FB_MBWriteRegs;		
	SetRampingSpd_ChB_MBAddr:WORD:=16#578;//寄存器地址
	SetRampingSpd_ChB:REAL;//PLC输入float型
	SetRampingSpd_ChBRegs:ARRAY[0..1] OF WORD;//Unoin转换，float为WORD
	SetRampingSpd_ChBRegs_LowByte:ARRAY[0..1] OF WORD;//取低字节
	SetRampingSpd_ChBRegs_HighByte:ARRAY[0..1] OF WORD;//取高字节
	SetRampingSpd_ChBRegs_PSProtocal:ARRAY[0..1] OF WORD;//重新拼接成电源协议
	btn_SetRampingSpd_ChB:BOOL;
	SetRampingSpd_ChB_State:DINT;
	SetRampingSpd_ChB_TON:TON;
	ieee754_SetRampingSpd_ChB:IEEE754_Convert;
	//获取当前电流值_ChB
	fb_GetCurrent_ChB: FB_MBReadRegs;		
	GetCurrent_ChB_MBAddr:WORD:=16#9C;//寄存器地址
	GetCurrent_ChBRegs_PSProtocal:ARRAY[0..1] OF WORD;//从PS获取到的WORD
	GetCurrent_ChBRegs_PSProtocal_LowByte:ARRAY[0..1] OF WORD;//格式转换
	GetCurrent_ChBRegs_PSProtocal_HighByte:ARRAY[0..1] OF WORD;//格式转换
	GetCurrent_ChBRegs:ARRAY[0..1] OF WORD;
	btn_GetCurrent_ChB:BOOL;
	GetCurrent_ChB_RTRIG:R_TRIG;
	GetCurrent_ChB_TON:TON;
	GetCurrent_ChB:REAL;
	ieee754_GetCurrent_ChB:IEEE754_Convert;
	//获取当前电压值_ChB
	fb_GetVoltage_ChB: FB_MBReadRegs;		
	GetVoltage_ChB_MBAddr:WORD:=16#A0;//寄存器地址
	GetVoltage_ChBRegs_PSProtocal:ARRAY[0..1] OF WORD;//从PS获取到的WORD
	GetVoltage_ChBRegs_PSProtocal_LowByte:ARRAY[0..1] OF WORD;//格式转换
	GetVoltage_ChBRegs_PSProtocal_HighByte:ARRAY[0..1] OF WORD;//格式转换
	GetVoltage_ChBRegs:ARRAY[0..1] OF WORD;
	btn_GetVoltage_ChB:BOOL;
	GetVoltage_ChB_RTRIG:R_TRIG;
	GetVoltage_ChB_TON:TON;
	GetVoltage_ChB:REAL;
	ieee754_GetVoltage_ChB:IEEE754_Convert;
	//获取当前电流ramping速度_CHB
	fb_GetRampingSpd_ChB: FB_MBReadRegs;		
	GetRampingSpd_ChB_MBAddr:WORD:=16#B4;//寄存器地址
	GetRampingSpd_ChBRegs_PSProtocal:ARRAY[0..1] OF WORD;//从PS获取到的WORD
	GetRampingSpd_ChBRegs_PSProtocal_LowByte:ARRAY[0..1] OF WORD;//格式转换
	GetRampingSpd_ChBRegs_PSProtocal_HighByte:ARRAY[0..1] OF WORD;//格式转换
	GetRampingSpd_ChBRegs:ARRAY[0..1] OF WORD;
	btn_GetRampingSpd_ChB:BOOL;
	GetRampingSpd_ChB_RTRIG:R_TRIG;
	GetRampingSpd_ChB_TON:TON;
	GetRampingSpd_ChB:REAL;
	ieee754_GetRampingSpd_ChB:IEEE754_Convert;
	//获取设定电流值_ChB
	fb_GetSetCurrent_ChB: FB_MBReadRegs;			
	GetSetCurrent_ChB_MBAddr:WORD:=16#170;//寄存器地址
	GetSetCurrent_ChBRegs_PSProtocal:ARRAY[0..1] OF WORD;//从PS获取到的WORD
	GetSetCurrent_ChBRegs_PSProtocal_LowByte:ARRAY[0..1] OF WORD;//格式转换
	GetSetCurrent_ChBRegs_PSProtocal_HighByte:ARRAY[0..1] OF WORD;//格式转换
	GetSetCurrent_ChBRegs:ARRAY[0..1] OF WORD;
	btn_GetSetCurrent_ChB:BOOL;
	GetSetCurrent_ChB_RTRIG:R_TRIG;
	GetSetCurrent_ChB_TON:TON;
	GetSetCurrent_ChB:REAL;
	ieee754_GetSetCurrent_ChB:IEEE754_Convert;
	//
	//AutoMode(AM)
	//
	AM_ChA_State:DINT;
	M_Compensation_Gap2Coil_ChA:ARRAY[1..31] OF Struct_M_Gap2Coil
	:=[	(Gap:=0,	CoilCurrent:=0.1),
		(Gap:=14,	CoilCurrent:=0.2),
		(Gap:=15,	CoilCurrent:=0.4),
		(Gap:=16,	CoilCurrent:=0.6),
		(Gap:=17,	CoilCurrent:=0.8),
		(Gap:=18,	CoilCurrent:=0.9),
		(Gap:=19,	CoilCurrent:=1.0),
		(Gap:=20,	CoilCurrent:=1.1),
		(Gap:=21,	CoilCurrent:=1.2),
		(Gap:=22,	CoilCurrent:=1.3),
		(Gap:=23,	CoilCurrent:=1.4),
		(Gap:=24,	CoilCurrent:=1.5),
		(Gap:=25,	CoilCurrent:=1.6),
		(Gap:=26,	CoilCurrent:=1.7),
		(Gap:=27,	CoilCurrent:=1.8),
		(Gap:=28,	CoilCurrent:=2.0),
		(Gap:=29,	CoilCurrent:=2.1),
		(Gap:=30,	CoilCurrent:=2.2),
		(Gap:=31,	CoilCurrent:=2.3),
		(Gap:=32,	CoilCurrent:=2.4),
		(Gap:=33,	CoilCurrent:=2.5),
		(Gap:=34,	CoilCurrent:=2.5),
		(Gap:=35,	CoilCurrent:=2.5),
		(Gap:=36,	CoilCurrent:=2.5),
		(Gap:=37,	CoilCurrent:=2.5),
		(Gap:=38,	CoilCurrent:=2.5),
		(Gap:=39,	CoilCurrent:=2.5),
		(Gap:=40,	CoilCurrent:=2.5),
		(Gap:=41,	CoilCurrent:=2.5),
		(Gap:=42,	CoilCurrent:=2.5),
		(Gap:=220,	CoilCurrent:=2.5)];
	i_ChA: INT;
	TargetCoilCurrent_ChA:REAL;
	AutoMode_ChA_TON:TON;
	//ChB
	AM_ChB_State:DINT;
	M_Compensation_Gap2Coil_ChB:ARRAY[1..31] OF Struct_M_Gap2Coil
	:=[	(Gap:=0,	CoilCurrent:=0.1),
		(Gap:=14,	CoilCurrent:=0.2),
		(Gap:=15,	CoilCurrent:=0.4),
		(Gap:=16,	CoilCurrent:=0.6),
		(Gap:=17,	CoilCurrent:=0.8),
		(Gap:=18,	CoilCurrent:=0.9),
		(Gap:=19,	CoilCurrent:=1.0),
		(Gap:=20,	CoilCurrent:=1.1),
		(Gap:=21,	CoilCurrent:=1.2),
		(Gap:=22,	CoilCurrent:=1.3),
		(Gap:=23,	CoilCurrent:=1.4),
		(Gap:=24,	CoilCurrent:=1.5),
		(Gap:=25,	CoilCurrent:=1.6),
		(Gap:=26,	CoilCurrent:=1.7),
		(Gap:=27,	CoilCurrent:=1.8),
		(Gap:=28,	CoilCurrent:=2.0),
		(Gap:=29,	CoilCurrent:=2.1),
		(Gap:=30,	CoilCurrent:=2.2),
		(Gap:=31,	CoilCurrent:=2.3),
		(Gap:=32,	CoilCurrent:=2.4),
		(Gap:=33,	CoilCurrent:=2.5),
		(Gap:=34,	CoilCurrent:=2.5),
		(Gap:=35,	CoilCurrent:=2.5),
		(Gap:=36,	CoilCurrent:=2.5),
		(Gap:=37,	CoilCurrent:=2.5),
		(Gap:=38,	CoilCurrent:=2.5),
		(Gap:=39,	CoilCurrent:=2.5),
		(Gap:=40,	CoilCurrent:=2.5),
		(Gap:=41,	CoilCurrent:=2.5),
		(Gap:=42,	CoilCurrent:=2.5),
		(Gap:=220,	CoilCurrent:=2.5)];
	i_ChB: INT;
	TargetCoilCurrent_ChB:REAL;
	AutoMode_ChB_TON:TON;
	//
	//recipe
	state_loadParameters:DINT;
	RecipeINT:INT;
	RecipeBOOL:BOOL;
	RecipeManCommands: RecipeManCommands;
	SaveParameter : BOOL;  //保存文件
	LoadParameter : BOOL;  //读取文件
	Save_R_TRIG   : R_TRIG;
	Read_R_TRIG   : R_TRIG;
	loadparameterStatus: INT;
	RecipeBOOL2:BOOL;
	ReturnDwordLoad: DWORD;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//自动or手动模式选择
IF AutoOrManualMode THEN
	AutoMode:=TRUE;
	ManualMode:=FALSE;
ELSE
	AutoMode:=FALSE;
	ManualMode:=TRUE;
END_IF
//
//Get状态下，部分手动还是自动，一直进行
//
//ChA
A_GetPSVersion();
A_GetPSStatus();
A_GetCurrent_ChA();
A_GetVoltage_ChA();
A_GetSetCurrent_ChA();
A_GetRampSpd_ChA();	
A_PowerOn_ChA();
A_PowerOff_ChA();
//ChB
A_GetCurrent_ChB();
A_GetVoltage_ChB();
A_GetSetCurrent_ChB();
A_GetRampSpd_ChB();
A_PowerOn_ChB();
A_PowerOff_ChB();

//ChA
A_SetCurrent_ChA();
A_SetRampingSpd_ChA();
//ChB
A_SetCurrent_ChB();
A_SetRampingSpd_ChB();
//
//set，分自动模式和手动模式
//
IF  AutoOrManualMode THEN
	A_AutoMode_ChA();
	//A_AutoMode_ChB();
END_IF

A_Reset_ChA();
A_Reset_ChB();

A_InitRecipeParameters();
]]></ST>
    </Implementation>
    <Folder Name="AutoMode" Id="{5da7478f-3930-4964-babe-4dcea0466a56}" />
    <Folder Name="Get" Id="{aec226e7-28a1-4bfd-ac2b-a05858e97730}" />
    <Folder Name="Set" Id="{318c3f5b-c841-49ef-b593-26dd9968e971}" />
    <Action Name="A_AutoMode_ChA" Id="{0c82ac42-95eb-492c-bfa9-d5dd5674d812}" FolderPath="AutoMode\">
      <Implementation>
        <ST><![CDATA[//
//0、/法，根据当前gap计算对应的电流。如果gap=0，不计算，保持当前状态，等到不为0时，继续计算
//1、检查电源状态，如果没有就打开
//2、电流设置为计算值
//3、回采当前电流值，当ABS(当前电流值-设定电流值)<阈值，该回合结束，返回第二步。超时，报错
//4、END
//
//
//如果当前磁间隙低于最小阈值或者大于最大阈值，则目标电流等于当前电流，也即不设置
IF UserMode.UserGapPositionDisplay<min_UserLEProtectionGapPosition OR UserMode.UserGapPositionDisplay>max_UserLEProtectionGapPosition THEN
	TargetCoilCurrent_ChA:=GetCurrent_ChA;
ELSE
	//插补法计算gap对应电流值
	FOR	i_ChA:= 1 TO 30 DO
		IF UserMode.UserGapPositionDisplay <M_Compensation_Gap2Coil_ChA[i_ChA+1].Gap AND UserMode.UserGapPositionDisplay>=M_Compensation_Gap2Coil_ChA[i_ChA].Gap THEN
				TargetCoilCurrent_ChA:=(((UserMode.UserGapPositionDisplay-M_Compensation_Gap2Coil_ChA[i_ChA].Gap)*(M_Compensation_Gap2Coil_ChA[i_ChA+1].CoilCurrent-M_Compensation_Gap2Coil_ChA[i_ChA].CoilCurrent))
						/(M_Compensation_Gap2Coil_ChA[i_ChA+1].Gap-M_Compensation_Gap2Coil_ChA[i_ChA].Gap))+M_Compensation_Gap2Coil_ChA[i_ChA].CoilCurrent;
		END_IF
	END_FOR
END_IF
//
CASE AM_ChA_State OF
	0:
		//如果电源未上电，上电,上电成功，转下一步
		IF NOT st_Power_ChA THEN
			btn_PowerOn_ChA:=TRUE;
		ELSE
			AM_ChA_State:=1;
		END_IF
	1:
		btn_PowerOn_ChA:=FALSE;
		//目标电流已实时计算得出，开始设置电流
		SetCurrent_ChA:=TargetCoilCurrent_ChA;
		btn_SetCurrent_ChA:=TRUE;
		AutoMode_ChA_TON.IN:=TRUE;
		IF ABS(SetCurrent_ChA-GetCurrent_ChA)<0.001 THEN
			AM_ChA_State:=88;
		END_IF
		IF AutoMode_ChA_TON.Q THEN
			AM_ChA_State:=99;
		END_IF
	88:
		btn_SetCurrent_ChA:=FALSE;
		AutoMode_ChA_TON.IN:=FALSE;
		AM_ChA_State:=0;
	99:
		btn_SetCurrent_ChA:=FALSE;
		AutoMode_ChA_TON.IN:=FALSE;
		AM_ChA_State:=0;

END_CASE
AutoMode_ChA_TON(PT:=T#0.1S);]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_AutoMode_ChB" Id="{dc4900f4-da02-4668-a596-9ed63075303c}" FolderPath="AutoMode\">
      <Implementation>
        <ST><![CDATA[//
//0、/法，根据当前gap计算对应的电流。如果gap=0，不计算，保持当前状态，等到不为0时，继续计算
//1、检查电源状态，如果没有就打开
//2、电流设置为计算值
//3、回采当前电流值，当ABS(当前电流值-设定电流值)<阈值，该回合结束，返回第二步。超时，报错
//4、END
//
//
//如果当前磁间隙低于最小阈值或者大于最大阈值，则目标电流等于当前电流，也即不设置
IF UserMode.UserGapPositionDisplay<min_UserLEProtectionGapPosition OR UserMode.UserGapPositionDisplay>max_UserLEProtectionGapPosition THEN
	TargetCoilCurrent_ChB:=GetCurrent_ChB;
ELSE
	//插补法计算gap对应电流值
	FOR	i_ChB:= 1 TO 30 DO
		IF UserMode.UserGapPositionDisplay <M_Compensation_Gap2Coil_ChB[i_ChB+1].Gap AND UserMode.UserGapPositionDisplay>=M_Compensation_Gap2Coil_ChB[i_ChB].Gap THEN
				TargetCoilCurrent_ChB:=(((UserMode.UserGapPositionDisplay-M_Compensation_Gap2Coil_ChB[i_ChB].Gap)*(M_Compensation_Gap2Coil_ChB[i_ChB+1].CoilCurrent-M_Compensation_Gap2Coil_ChB[i_ChB].CoilCurrent))
						/(M_Compensation_Gap2Coil_ChB[i_ChB+1].Gap-M_Compensation_Gap2Coil_ChB[i_ChB].Gap))+M_Compensation_Gap2Coil_ChB[i_ChB].CoilCurrent;
		END_IF
	END_FOR
END_IF
//
CASE AM_ChB_State OF
	0:
		//如果电源未上电，上电,上电成功，转下一步
		IF NOT st_Power_ChB THEN
			btn_PowerOn_ChB:=TRUE;
		ELSE
			AM_ChB_State:=1;
		END_IF
	1:
		btn_PowerOn_ChB:=FALSE;
		//目标电流已实时计算得出，开始设置电流
		SetCurrent_ChB:=TargetCoilCurrent_ChB;
		btn_SetCurrent_ChB:=TRUE;
		AutoMode_ChB_TON.IN:=TRUE;
		IF ABS(SetCurrent_ChB-GetCurrent_ChB)<0.001 THEN
			AM_ChB_State:=88;
		END_IF
		IF AutoMode_ChB_TON.Q THEN
			AM_ChB_State:=99;
		END_IF
	88:
		btn_SetCurrent_ChB:=FALSE;
		AutoMode_ChB_TON.IN:=FALSE;
		AM_ChB_State:=0;
	99:
		btn_SetCurrent_ChB:=FALSE;
		AutoMode_ChB_TON.IN:=FALSE;
		AM_ChB_State:=0;

END_CASE
AutoMode_ChB_TON(PT:=T#0.1S);]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetCurrent_ChA" Id="{73fa9476-f6d6-4af3-9d60-17f54f85fc2f}" FolderPath="Get\">
      <Implementation>
        <ST><![CDATA[//上升沿触发
GetCurrent_ChA_RTRIG(CLK:=btn_GetCurrent_ChA);
IF GetCurrent_ChA_RTRIG.Q THEN
	btn_GetCurrent_ChA:=FALSE;
END_IF
//每隔固定时间获取一次
GetCurrent_ChA_TON(PT:=T#0.02S);
GetCurrent_ChA_TON.IN:=TRUE;
IF GetCurrent_ChA_TON.Q THEN
	btn_GetCurrent_ChA:=TRUE;
	GetCurrent_ChA_TON.IN:=FALSE;
END_IF

//字节调换，转为电源规定的格式
GetCurrent_ChARegs_PSProtocal_LowByte[0]:=SHL((GetCurrent_ChARegs_PSProtocal[0] AND 16#00FF),8);
GetCurrent_ChARegs_PSProtocal_HighByte[0]:=SHR((GetCurrent_ChARegs_PSProtocal[0] AND 16#FF00),8);
GetCurrent_ChARegs[0]:=GetCurrent_ChARegs_PSProtocal_LowByte[0] OR GetCurrent_ChARegs_PSProtocal_HighByte[0];
GetCurrent_ChARegs_PSProtocal_LowByte[1]:=SHL((GetCurrent_ChARegs_PSProtocal[1] AND 16#00FF),8);
GetCurrent_ChARegs_PSProtocal_HighByte[1]:=SHR((GetCurrent_ChARegs_PSProtocal[1] AND 16#FF00),8);
GetCurrent_ChARegs[1]:=GetCurrent_ChARegs_PSProtocal_LowByte[1] OR GetCurrent_ChARegs_PSProtocal_HighByte[1];
//IEEE转换，WORD 到 REAL
ieee754_GetCurrent_ChA.data_word[0]:=GetCurrent_ChARegs[0];
ieee754_GetCurrent_ChA.data_word[1]:=GetCurrent_ChARegs[1];
GetCurrent_ChA:=DINT_TO_REAL(REAL_TO_DINT(ieee754_GetCurrent_ChA.data_float*10000))/10000;

////功能块
fb_GetCurrent_ChA(
	sIPAddr:=IPAddr , 		//Server IP地址
	nTCPPort:=TCPPort, 						//Modbus-Tcp端口号
	nUnitID:=1 , 						//Modbus-Tcp从站号
	nQuantity:=2 , 						//读取保持寄存器个数
	nMBAddr:=GetCurrent_ChA_MBAddr , 					//读取保持寄存器Modbus起始地址
	cbLength:= SIZEOF(GetCurrent_ChARegs_PSProtocal), 		//存放保持寄存器变量的个数
	pDestAddr:= ADR(GetCurrent_ChARegs_PSProtocal), 		//存放保持寄存器变量指针起始地址
	bExecute:= btn_GetCurrent_ChA, 		//执行
	tTimeout:= T#1S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetCurrent_ChB" Id="{74169795-955e-4d62-806f-4f89deacf518}" FolderPath="Get\">
      <Implementation>
        <ST><![CDATA[//上升沿触发
GetCurrent_ChB_RTRIG(CLK:=btn_GetCurrent_ChB);
IF GetCurrent_ChB_RTRIG.Q THEN
	btn_GetCurrent_ChB:=FALSE;
END_IF
//每隔固定时间获取一次
GetCurrent_ChB_TON(PT:=T#0.2S);
GetCurrent_ChB_TON.IN:=TRUE;
IF GetCurrent_ChB_TON.Q THEN
	btn_GetCurrent_ChB:=TRUE;
	GetCurrent_ChB_TON.IN:=FALSE;
END_IF

//字节调换，转为电源规定的格式
GetCurrent_ChBRegs_PSProtocal_LowByte[0]:=SHL((GetCurrent_ChBRegs_PSProtocal[0] AND 16#00FF),8);
GetCurrent_ChBRegs_PSProtocal_HighByte[0]:=SHR((GetCurrent_ChBRegs_PSProtocal[0] AND 16#FF00),8);
GetCurrent_ChBRegs[0]:=GetCurrent_ChBRegs_PSProtocal_LowByte[0] OR GetCurrent_ChBRegs_PSProtocal_HighByte[0];
GetCurrent_ChBRegs_PSProtocal_LowByte[1]:=SHL((GetCurrent_ChBRegs_PSProtocal[1] AND 16#00FF),8);
GetCurrent_ChBRegs_PSProtocal_HighByte[1]:=SHR((GetCurrent_ChBRegs_PSProtocal[1] AND 16#FF00),8);
GetCurrent_ChBRegs[1]:=GetCurrent_ChBRegs_PSProtocal_LowByte[1] OR GetCurrent_ChBRegs_PSProtocal_HighByte[1];
//IEEE转换，WORD 到 REAL
ieee754_GetCurrent_ChB.data_word[0]:=GetCurrent_ChBRegs[0];
ieee754_GetCurrent_ChB.data_word[1]:=GetCurrent_ChBRegs[1];
GetCurrent_ChB:=DINT_TO_REAL(REAL_TO_DINT(ieee754_GetCurrent_ChB.data_float*10000))/10000;

////功能块
fb_GetCurrent_ChB(
	sIPAddr:=IPAddr , 		//Server IP地址
	nTCPPort:=TCPPort, 						//Modbus-Tcp端口号
	nUnitID:=1 , 						//Modbus-Tcp从站号
	nQuantity:=2 , 						//读取保持寄存器个数
	nMBAddr:=GetCurrent_ChB_MBAddr , 					//读取保持寄存器Modbus起始地址
	cbLength:= SIZEOF(GetCurrent_ChBRegs_PSProtocal), 		//存放保持寄存器变量的个数
	pDestAddr:= ADR(GetCurrent_ChBRegs_PSProtocal), 		//存放保持寄存器变量指针起始地址
	bExecute:= btn_GetCurrent_ChB, 		//执行
	tTimeout:= T#1S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetPSStatus" Id="{8d90d55d-0d8a-4837-8ca6-e7cfa802c26f}" FolderPath="Get\">
      <Implementation>
        <ST><![CDATA[//获取版本信息
GetPSStatus_RTRIG(CLK:=btn_GetPSStatus);
IF GetPSStatus_RTRIG.Q THEN
	btn_GetPSStatus:=FALSE;
END_IF
//每隔1s获取一次电源状态
GetPSStatus_TON(PT:=T#0.2S);
GetPSStatus_TON.IN:=TRUE;
IF GetPSStatus_TON.Q THEN
	btn_GetPSStatus:=TRUE;
	GetPSStatus_TON.IN:=FALSE;
END_IF
//字节调换，转为电源规定的格式
PSStatus_PSProtocal_LowByte[0]:=SHL((PSStatus_PSProtocal[0] AND 16#00FF),8);
PSStatus_PSProtocal_HighByte[0]:=SHR((PSStatus_PSProtocal[0] AND 16#FF00),8);
PSStatus[0]:=PSStatus_PSProtocal_LowByte[0] OR PSStatus_PSProtocal_HighByte[0];
PSStatus_PSProtocal_LowByte[1]:=SHL((PSStatus_PSProtocal[1] AND 16#00FF),8);
PSStatus_PSProtocal_HighByte[1]:=SHR((PSStatus_PSProtocal[1] AND 16#FF00),8);
PSStatus[1]:=PSStatus_PSProtocal_LowByte[1] OR PSStatus_PSProtocal_HighByte[1];
//
PSStatus_List[0]:=(PSStatus[0] AND 16#0001) <> 0;//A供电
PSStatus_List[1]:=(PSStatus[0] AND 16#0002) <> 0;
PSStatus_List[2]:=(PSStatus[0] AND 16#0004) <> 0;
PSStatus_List[3]:=(PSStatus[0] AND 16#0008) <> 0;//A急停
PSStatus_List[4]:=(PSStatus[0] AND 16#0010) <> 0;
PSStatus_List[5]:=(PSStatus[0] AND 16#0020) <> 0;
PSStatus_List[6]:=(PSStatus[0] AND 16#0040) <> 0;//B供电
PSStatus_List[7]:=(PSStatus[0] AND 16#0080) <> 0;
PSStatus_List[8]:=(PSStatus[0] AND 16#0100) <> 0;
PSStatus_List[9]:=(PSStatus[0] AND 16#0200) <> 0;//B急停
PSStatus_List[10]:=(PSStatus[0] AND 16#0400) <> 0;
PSStatus_List[11]:=(PSStatus[0] AND 16#0800) <> 0;
PSStatus_List[12]:=(PSStatus[0] AND 16#1000) <> 0;//A故障
PSStatus_List[13]:=(PSStatus[0] AND 16#2000) <> 0;//B故障
PSStatus_List[14]:=(PSStatus[0] AND 16#4000) <> 0;//复位
PSStatus_List[15]:=(PSStatus[0] AND 16#8000) <> 0;//本地Or远控
PSStatus_List[16]:=(PSStatus[1] AND 16#0001) <> 0;
PSStatus_List[17]:=(PSStatus[1] AND 16#0002) <> 0;
PSStatus_List[18]:=(PSStatus[1] AND 16#0004) <> 0;
PSStatus_List[19]:=(PSStatus[1] AND 16#0008) <> 0;
PSStatus_List[20]:=(PSStatus[1] AND 16#0010) <> 0;
PSStatus_List[21]:=(PSStatus[1] AND 16#0020) <> 0;
PSStatus_List[22]:=(PSStatus[1] AND 16#0040) <> 0;
PSStatus_List[23]:=(PSStatus[1] AND 16#0080) <> 0;
PSStatus_List[24]:=(PSStatus[1] AND 16#0100) <> 0;
PSStatus_List[25]:=(PSStatus[1] AND 16#0200) <> 0;
PSStatus_List[26]:=(PSStatus[1] AND 16#0400) <> 0;
PSStatus_List[27]:=(PSStatus[1] AND 16#0800) <> 0;
PSStatus_List[28]:=(PSStatus[1] AND 16#1000) <> 0;
PSStatus_List[29]:=(PSStatus[1] AND 16#2000) <> 0;
PSStatus_List[30]:=(PSStatus[1] AND 16#4000) <> 0;
PSStatus_List[31]:=(PSStatus[1] AND 16#8000) <> 0;

st_Power_ChA:=PSStatus_List[0];
st_EStop_ChA:=PSStatus_List[3];
st_Fault_ChA:=PSStatus_List[12];
st_Power_ChB:=PSStatus_List[6];
st_EStop_ChB:=PSStatus_List[9];
st_Fault_ChB:=PSStatus_List[13];
st_Reset:=PSStatus_List[14];
st_LocalOrRemote:=PSStatus_List[15];
////功能块
fb_GetPSStatus(
	sIPAddr:=IPAddr , 		//Server IP地址
	nTCPPort:=TCPPort, 						//Modbus-Tcp端口号
	nUnitID:=1 , 						//Modbus-Tcp从站号
	nQuantity:=2 , 						//读取保持寄存器个数
	nMBAddr:=PSStatus_MBAddr , 					//读取保持寄存器Modbus起始地址
	cbLength:= SIZEOF(PSStatus_PSProtocal), 		//存放保持寄存器变量的个数
	pDestAddr:= ADR(PSStatus_PSProtocal), 		//存放保持寄存器变量指针起始地址
	bExecute:= btn_GetPSStatus, 		//执行
	tTimeout:= T#1S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=> );
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetPSVersion" Id="{205a4a52-191f-4d1c-a6af-90df70b22837}" FolderPath="Get\">
      <Implementation>
        <ST><![CDATA[//获取版本信息
GetPSVersion_RTRIG(CLK:=btn_GetPSVersion);
IF GetPSVersion_RTRIG.Q THEN
	btn_GetPSVersion:=FALSE;
END_IF
//每隔1s获取一次版本信息
GetPSVersion_TON(PT:=T#1S);
GetPSVersion_TON.IN:=TRUE;
IF GetPSVersion_TON.Q THEN
	btn_GetPSVersion:=TRUE;
	GetPSVersion_TON.IN:=FALSE;
END_IF
//字节调换，转为电源规定的格式
PSVersion_PSProtocal_LowByte[0]:=SHL((PSVersion_PSProtocal[0] AND 16#00FF),8);
PSVersion_PSProtocal_HighByte[0]:=SHR((PSVersion_PSProtocal[0] AND 16#FF00),8);
PSVersion_Word[0]:=PSVersion_PSProtocal_LowByte[0] OR PSVersion_PSProtocal_HighByte[0];
PSVersion_PSProtocal_LowByte[1]:=SHL((PSVersion_PSProtocal[1] AND 16#00FF),8);
PSVersion_PSProtocal_HighByte[1]:=SHR((PSVersion_PSProtocal[1] AND 16#FF00),8);
PSVersion_Word[1]:=PSVersion_PSProtocal_LowByte[1] OR PSVersion_PSProtocal_HighByte[1];
PSVersion:=CONCAT(WORD_TO_STRING(PSVersion[1]),WORD_TO_STRING(PSVersion[0]));
////功能块
fb_GetPSVersion(
	sIPAddr:=IPAddr , 		//Server IP地址
	nTCPPort:=TCPPort, 						//Modbus-Tcp端口号
	nUnitID:=1 , 						//Modbus-Tcp从站号
	nQuantity:=2 , 						//读取保持寄存器个数
	nMBAddr:=PSVersion_MBAddr , 					//读取保持寄存器Modbus起始地址
	cbLength:= SIZEOF(PSVersion_PSProtocal), 		//存放保持寄存器变量的个数
	pDestAddr:= ADR(PSVersion_PSProtocal), 		//存放保持寄存器变量指针起始地址
	bExecute:= btn_GetPSVersion, 		//执行
	tTimeout:= T#1S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetRampSpd_ChA" Id="{4d4f7bd0-b1c1-4126-9f1c-d011bf787acd}" FolderPath="Get\">
      <Implementation>
        <ST><![CDATA[//上升沿触发
GetRampingSpd_ChA_RTRIG(CLK:=btn_GetRampingSpd_ChA);
IF GetRampingSpd_ChA_RTRIG.Q THEN
	btn_GetRampingSpd_ChA:=FALSE;
END_IF
//每隔固定时间获取一次
GetRampingSpd_ChA_TON(PT:=T#0.2S);
GetRampingSpd_ChA_TON.IN:=TRUE;
IF GetRampingSpd_ChA_TON.Q THEN
	btn_GetRampingSpd_ChA:=TRUE;
	GetRampingSpd_ChA_TON.IN:=FALSE;
END_IF

//字节调换，转为电源规定的格式
GetRampingSpd_ChARegs_PSProtocal_LowByte[0]:=SHL((GetRampingSpd_ChARegs_PSProtocal[0] AND 16#00FF),8);
GetRampingSpd_ChARegs_PSProtocal_HighByte[0]:=SHR((GetRampingSpd_ChARegs_PSProtocal[0] AND 16#FF00),8);
GetRampingSpd_ChARegs[0]:=GetRampingSpd_ChARegs_PSProtocal_LowByte[0] OR GetRampingSpd_ChARegs_PSProtocal_HighByte[0];
GetRampingSpd_ChARegs_PSProtocal_LowByte[1]:=SHL((GetRampingSpd_ChARegs_PSProtocal[1] AND 16#00FF),8);
GetRampingSpd_ChARegs_PSProtocal_HighByte[1]:=SHR((GetRampingSpd_ChARegs_PSProtocal[1] AND 16#FF00),8);
GetRampingSpd_ChARegs[1]:=GetRampingSpd_ChARegs_PSProtocal_LowByte[1] OR GetRampingSpd_ChARegs_PSProtocal_HighByte[1];
//IEEE转换，WORD 到 REAL
ieee754_GetRampingSpd_ChA.data_word[0]:=GetRampingSpd_ChARegs[0];
ieee754_GetRampingSpd_ChA.data_word[1]:=GetRampingSpd_ChARegs[1];
GetRampingSpd_ChA:=DINT_TO_REAL(REAL_TO_DINT(ieee754_GetRampingSpd_ChA.data_float*10000))/10000;

////功能块
fb_GetRampingSpd_ChA(
	sIPAddr:=IPAddr , 		//Server IP地址
	nTCPPort:=TCPPort, 						//Modbus-Tcp端口号
	nUnitID:=1 , 						//Modbus-Tcp从站号
	nQuantity:=2 , 						//读取保持寄存器个数
	nMBAddr:=GetRampingSpd_ChA_MBAddr , 					//读取保持寄存器Modbus起始地址
	cbLength:= SIZEOF(GetRampingSpd_ChARegs_PSProtocal), 		//存放保持寄存器变量的个数
	pDestAddr:= ADR(GetRampingSpd_ChARegs_PSProtocal), 		//存放保持寄存器变量指针起始地址
	bExecute:= btn_GetRampingSpd_ChA, 		//执行
	tTimeout:= T#1S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetRampSpd_ChB" Id="{04054f1e-d02b-4221-a6ae-838b5da525c2}" FolderPath="Get\">
      <Implementation>
        <ST><![CDATA[//上升沿触发
GetRampingSpd_ChB_RTRIG(CLK:=btn_GetRampingSpd_ChB);
IF GetRampingSpd_ChB_RTRIG.Q THEN
	btn_GetRampingSpd_ChB:=FALSE;
END_IF
//每隔固定时间获取一次
GetRampingSpd_ChB_TON(PT:=T#0.2S);
GetRampingSpd_ChB_TON.IN:=TRUE;
IF GetRampingSpd_ChB_TON.Q THEN
	btn_GetRampingSpd_ChB:=TRUE;
	GetRampingSpd_ChB_TON.IN:=FALSE;
END_IF

//字节调换，转为电源规定的格式
GetRampingSpd_ChBRegs_PSProtocal_LowByte[0]:=SHL((GetRampingSpd_ChBRegs_PSProtocal[0] AND 16#00FF),8);
GetRampingSpd_ChBRegs_PSProtocal_HighByte[0]:=SHR((GetRampingSpd_ChBRegs_PSProtocal[0] AND 16#FF00),8);
GetRampingSpd_ChBRegs[0]:=GetRampingSpd_ChBRegs_PSProtocal_LowByte[0] OR GetRampingSpd_ChBRegs_PSProtocal_HighByte[0];
GetRampingSpd_ChBRegs_PSProtocal_LowByte[1]:=SHL((GetRampingSpd_ChBRegs_PSProtocal[1] AND 16#00FF),8);
GetRampingSpd_ChBRegs_PSProtocal_HighByte[1]:=SHR((GetRampingSpd_ChBRegs_PSProtocal[1] AND 16#FF00),8);
GetRampingSpd_ChBRegs[1]:=GetRampingSpd_ChBRegs_PSProtocal_LowByte[1] OR GetRampingSpd_ChBRegs_PSProtocal_HighByte[1];
//IEEE转换，WORD 到 REAL
ieee754_GetRampingSpd_ChB.data_word[0]:=GetRampingSpd_ChBRegs[0];
ieee754_GetRampingSpd_ChB.data_word[1]:=GetRampingSpd_ChBRegs[1];
GetRampingSpd_ChB:=DINT_TO_REAL(REAL_TO_DINT(ieee754_GetRampingSpd_ChB.data_float*10000))/10000;

////功能块
fb_GetRampingSpd_ChB(
	sIPAddr:=IPAddr , 		//Server IP地址
	nTCPPort:=TCPPort, 						//Modbus-Tcp端口号
	nUnitID:=1 , 						//Modbus-Tcp从站号
	nQuantity:=2 , 						//读取保持寄存器个数
	nMBAddr:=GetRampingSpd_ChB_MBAddr , 					//读取保持寄存器Modbus起始地址
	cbLength:= SIZEOF(GetRampingSpd_ChBRegs_PSProtocal), 		//存放保持寄存器变量的个数
	pDestAddr:= ADR(GetRampingSpd_ChBRegs_PSProtocal), 		//存放保持寄存器变量指针起始地址
	bExecute:= btn_GetRampingSpd_ChB, 		//执行
	tTimeout:= T#1S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetSetCurrent_ChA" Id="{954930b3-56a7-41c1-a31d-96166d9e3673}" FolderPath="Get\">
      <Implementation>
        <ST><![CDATA[

GetSetCurrent_ChA_RTRIG(CLK:=btn_GetSetCurrent_ChA);
IF GetSetCurrent_ChA_RTRIG.Q THEN
	btn_GetSetCurrent_ChA:=FALSE;
END_IF
//每隔固定时间获取一次
GetSetCurrent_ChA_TON(PT:=T#0.2S);
GetSetCurrent_ChA_TON.IN:=TRUE;
IF GetSetCurrent_ChA_TON.Q THEN
	btn_GetSetCurrent_ChA:=TRUE;
	GetSetCurrent_ChA_TON.IN:=FALSE;
END_IF

//字节调换，转为电源规定的格式
GetSetCurrent_ChARegs_PSProtocal_LowByte[0]:=SHL((GetSetCurrent_ChARegs_PSProtocal[0] AND 16#00FF),8);
GetSetCurrent_ChARegs_PSProtocal_HighByte[0]:=SHR((GetSetCurrent_ChARegs_PSProtocal[0] AND 16#FF00),8);
GetSetCurrent_ChARegs[0]:=GetSetCurrent_ChARegs_PSProtocal_LowByte[0] OR GetSetCurrent_ChARegs_PSProtocal_HighByte[0];
GetSetCurrent_ChARegs_PSProtocal_LowByte[1]:=SHL((GetSetCurrent_ChARegs_PSProtocal[1] AND 16#00FF),8);
GetSetCurrent_ChARegs_PSProtocal_HighByte[1]:=SHR((GetSetCurrent_ChARegs_PSProtocal[1] AND 16#FF00),8);
GetSetCurrent_ChARegs[1]:=GetSetCurrent_ChARegs_PSProtocal_LowByte[1] OR GetSetCurrent_ChARegs_PSProtocal_HighByte[1];
//IEEE转换，WORD 到 REAL
ieee754_GetSetCurrent_ChA.data_word[0]:=GetSetCurrent_ChARegs[0];
ieee754_GetSetCurrent_ChA.data_word[1]:=GetSetCurrent_ChARegs[1];
GetSetCurrent_ChA:=DINT_TO_REAL(REAL_TO_DINT(ieee754_GetSetCurrent_ChA.data_float*10000))/10000;

////功能块
fb_GetSetCurrent_ChA(
	sIPAddr:=IPAddr , 		//Server IP地址
	nTCPPort:=TCPPort, 						//Modbus-Tcp端口号
	nUnitID:=1 , 						//Modbus-Tcp从站号
	nQuantity:=2 , 						//读取保持寄存器个数
	nMBAddr:=GetSetCurrent_ChA_MBAddr , 					//读取保持寄存器Modbus起始地址
	cbLength:= SIZEOF(GetSetCurrent_ChARegs_PSProtocal), 		//存放保持寄存器变量的个数
	pDestAddr:= ADR(GetSetCurrent_ChARegs_PSProtocal), 		//存放保持寄存器变量指针起始地址
	bExecute:= btn_GetSetCurrent_ChA, 		//执行
	tTimeout:= T#1S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetSetCurrent_ChB" Id="{a8b6554d-100b-493f-a03a-a2bb1f31f612}" FolderPath="Get\">
      <Implementation>
        <ST><![CDATA[GetSetCurrent_ChB_RTRIG(CLK:=btn_GetSetCurrent_ChB);
IF GetSetCurrent_ChB_RTRIG.Q THEN
	btn_GetSetCurrent_ChB:=FALSE;
END_IF
//每隔固定时间获取一次
GetSetCurrent_ChB_TON(PT:=T#0.2S);
GetSetCurrent_ChB_TON.IN:=TRUE;
IF GetSetCurrent_ChB_TON.Q THEN
	btn_GetSetCurrent_ChB:=TRUE;
	GetSetCurrent_ChB_TON.IN:=FALSE;
END_IF

//字节调换，转为电源规定的格式
GetSetCurrent_ChBRegs_PSProtocal_LowByte[0]:=SHL((GetSetCurrent_ChBRegs_PSProtocal[0] AND 16#00FF),8);
GetSetCurrent_ChBRegs_PSProtocal_HighByte[0]:=SHR((GetSetCurrent_ChBRegs_PSProtocal[0] AND 16#FF00),8);
GetSetCurrent_ChBRegs[0]:=GetSetCurrent_ChBRegs_PSProtocal_LowByte[0] OR GetSetCurrent_ChBRegs_PSProtocal_HighByte[0];
GetSetCurrent_ChBRegs_PSProtocal_LowByte[1]:=SHL((GetSetCurrent_ChBRegs_PSProtocal[1] AND 16#00FF),8);
GetSetCurrent_ChBRegs_PSProtocal_HighByte[1]:=SHR((GetSetCurrent_ChBRegs_PSProtocal[1] AND 16#FF00),8);
GetSetCurrent_ChBRegs[1]:=GetSetCurrent_ChBRegs_PSProtocal_LowByte[1] OR GetSetCurrent_ChBRegs_PSProtocal_HighByte[1];
//IEEE转换，WORD 到 REAL
ieee754_GetSetCurrent_ChB.data_word[0]:=GetSetCurrent_ChBRegs[0];
ieee754_GetSetCurrent_ChB.data_word[1]:=GetSetCurrent_ChBRegs[1];
GetSetCurrent_ChB:=DINT_TO_REAL(REAL_TO_DINT(ieee754_GetSetCurrent_ChB.data_float*10000))/10000;

////功能块
fb_GetSetCurrent_ChB(
	sIPAddr:=IPAddr , 		//Server IP地址
	nTCPPort:=TCPPort, 						//Modbus-Tcp端口号
	nUnitID:=1 , 						//Modbus-Tcp从站号
	nQuantity:=2 , 						//读取保持寄存器个数
	nMBAddr:=GetSetCurrent_ChB_MBAddr , 					//读取保持寄存器Modbus起始地址
	cbLength:= SIZEOF(GetSetCurrent_ChBRegs_PSProtocal), 		//存放保持寄存器变量的个数
	pDestAddr:= ADR(GetSetCurrent_ChBRegs_PSProtocal), 		//存放保持寄存器变量指针起始地址
	bExecute:= btn_GetSetCurrent_ChB, 		//执行
	tTimeout:= T#1S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetVoltage_ChA" Id="{11b33db8-1905-49a4-af51-e344f7403f08}" FolderPath="Get\">
      <Implementation>
        <ST><![CDATA[//上升沿触发
GetVoltage_ChA_RTRIG(CLK:=btn_GetVoltage_ChA);
IF GetVoltage_ChA_RTRIG.Q THEN
	btn_GetVoltage_ChA:=FALSE;
END_IF
//每隔固定时间获取一次
GetVoltage_ChA_TON(PT:=T#0.2S);
GetVoltage_ChA_TON.IN:=TRUE;
IF GetVoltage_ChA_TON.Q THEN
	btn_GetVoltage_ChA:=TRUE;
	GetVoltage_ChA_TON.IN:=FALSE;
END_IF

//字节调换，转为电源规定的格式
GetVoltage_ChARegs_PSProtocal_LowByte[0]:=SHL((GetVoltage_ChARegs_PSProtocal[0] AND 16#00FF),8);
GetVoltage_ChARegs_PSProtocal_HighByte[0]:=SHR((GetVoltage_ChARegs_PSProtocal[0] AND 16#FF00),8);
GetVoltage_ChARegs[0]:=GetVoltage_ChARegs_PSProtocal_LowByte[0] OR GetVoltage_ChARegs_PSProtocal_HighByte[0];
GetVoltage_ChARegs_PSProtocal_LowByte[1]:=SHL((GetVoltage_ChARegs_PSProtocal[1] AND 16#00FF),8);
GetVoltage_ChARegs_PSProtocal_HighByte[1]:=SHR((GetVoltage_ChARegs_PSProtocal[1] AND 16#FF00),8);
GetVoltage_ChARegs[1]:=GetVoltage_ChARegs_PSProtocal_LowByte[1] OR GetVoltage_ChARegs_PSProtocal_HighByte[1];
//IEEE转换，WORD 到 REAL
ieee754_GetVoltage_ChA.data_word[0]:=GetVoltage_ChARegs[0];
ieee754_GetVoltage_ChA.data_word[1]:=GetVoltage_ChARegs[1];
GetVoltage_ChA:=DINT_TO_REAL(REAL_TO_DINT(ieee754_GetVoltage_ChA.data_float*10000))/10000;


////功能块
fb_GetVoltage_ChA(
	sIPAddr:=IPAddr , 		//Server IP地址
	nTCPPort:=TCPPort, 						//Modbus-Tcp端口号
	nUnitID:=1 , 						//Modbus-Tcp从站号
	nQuantity:=2 , 						//读取保持寄存器个数
	nMBAddr:=GetVoltage_ChA_MBAddr , 					//读取保持寄存器Modbus起始地址
	cbLength:= SIZEOF(GetVoltage_ChARegs_PSProtocal), 		//存放保持寄存器变量的个数
	pDestAddr:= ADR(GetVoltage_ChARegs_PSProtocal), 		//存放保持寄存器变量指针起始地址
	bExecute:= btn_GetVoltage_ChA, 		//执行
	tTimeout:= T#1S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetVoltage_ChB" Id="{20201a25-8f95-4b3e-90a5-878f91986f50}" FolderPath="Get\">
      <Implementation>
        <ST><![CDATA[//上升沿触发
GetVoltage_ChB_RTRIG(CLK:=btn_GetVoltage_ChB);
IF GetVoltage_ChB_RTRIG.Q THEN
	btn_GetVoltage_ChB:=FALSE;
END_IF
//每隔固定时间获取一次
GetVoltage_ChB_TON(PT:=T#0.2S);
GetVoltage_ChB_TON.IN:=TRUE;
IF GetVoltage_ChB_TON.Q THEN
	btn_GetVoltage_ChB:=TRUE;
	GetVoltage_ChB_TON.IN:=FALSE;
END_IF

//字节调换，转为电源规定的格式
GetVoltage_ChBRegs_PSProtocal_LowByte[0]:=SHL((GetVoltage_ChBRegs_PSProtocal[0] AND 16#00FF),8);
GetVoltage_ChBRegs_PSProtocal_HighByte[0]:=SHR((GetVoltage_ChBRegs_PSProtocal[0] AND 16#FF00),8);
GetVoltage_ChBRegs[0]:=GetVoltage_ChBRegs_PSProtocal_LowByte[0] OR GetVoltage_ChBRegs_PSProtocal_HighByte[0];
GetVoltage_ChBRegs_PSProtocal_LowByte[1]:=SHL((GetVoltage_ChBRegs_PSProtocal[1] AND 16#00FF),8);
GetVoltage_ChBRegs_PSProtocal_HighByte[1]:=SHR((GetVoltage_ChBRegs_PSProtocal[1] AND 16#FF00),8);
GetVoltage_ChBRegs[1]:=GetVoltage_ChBRegs_PSProtocal_LowByte[1] OR GetVoltage_ChBRegs_PSProtocal_HighByte[1];
//IEEE转换，WORD 到 REAL
ieee754_GetVoltage_ChB.data_word[0]:=GetVoltage_ChBRegs[0];
ieee754_GetVoltage_ChB.data_word[1]:=GetVoltage_ChBRegs[1];
GetVoltage_ChB:=DINT_TO_REAL(REAL_TO_DINT(ieee754_GetVoltage_ChB.data_float*10000))/10000;


////功能块
fb_GetVoltage_ChB(
	sIPAddr:=IPAddr , 		//Server IP地址
	nTCPPort:=TCPPort, 						//Modbus-Tcp端口号
	nUnitID:=1 , 						//Modbus-Tcp从站号
	nQuantity:=2 , 						//读取保持寄存器个数
	nMBAddr:=GetVoltage_ChB_MBAddr , 					//读取保持寄存器Modbus起始地址
	cbLength:= SIZEOF(GetVoltage_ChBRegs_PSProtocal), 		//存放保持寄存器变量的个数
	pDestAddr:= ADR(GetVoltage_ChBRegs_PSProtocal), 		//存放保持寄存器变量指针起始地址
	bExecute:= btn_GetVoltage_ChB, 		//执行
	tTimeout:= T#1S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_InitRecipeParameters" Id="{0876f8fa-a3be-4a3c-bd2e-a43358001d51}">
      <Implementation>
        <ST><![CDATA[CASE state_loadParameters OF
	0:
		LoadParameter:=TRUE;
		Read_R_TRIG(CLK:=LoadParameter , Q=> );
		IF Read_R_TRIG.Q THEN
			state_loadParameters:=1;
		END_IF
	1:
		 ReturnDwordLoad:=RecipeManCommands.LoadAndWriteRecipe(RecipeDefinitionName:='PS2Recipes' , RecipeName:='PS2Parameters');
    	 LoadParameter:=FALSE;
		 IF ReturnDwordLoad<>0 THEN
		 	state_loadParameters:=-100;
		ELSE
			LoadRecipeParameters:=TRUE;
			LoadParameter:=FALSE;
			state_loadParameters:=88;
	 	END_IF
	88:
		loadParametersDone:=TRUE;
	-100:
		loadParametersDone:=FALSE;
		CoilError:=TRUE;
		CoilErrorId:=101;
		CoilErrorDescription:='LoadCoilRecipeParameters Error';
		//Plc_EmergencyStop:=FALSE;
END_CASE
//Save_R_TRIG(CLK:=SaveParameter , Q=> );
//Read_R_TRIG(CLK:=LoadParameter , Q=> );
//IF Save_R_TRIG.Q THEN  //将plc数据以文件形式保存在工控机中
//	 RecipeManCommands.CreateRecipe(RecipeDefinitionName:='PS1Recipes' , RecipeName:='PS1Parameters' );
//	 RecipeManCommands.ReadAndSaveRecipe(RecipeDefinitionName:='PS1Recipes' , RecipeName:='PS1Parameters' );
//	 SaveParameter:=FALSE;
//END_IF
//IF Read_R_TRIG.Q THEN  //将工控机中的文件数据读取到plc中
//     ReturnDwordLoad:=RecipeManCommands.LoadAndWriteRecipe(RecipeDefinitionName:='PS1Recipes' , RecipeName:='PS1Parameters');
//     LoadParameter:=FALSE;
//	 IF ReturnDwordLoad<>0 THEN
//		 Error:=TRUE;
//		 ErrorId:=101;
//		 ErrorDescription:='LoadRecipeParameters Error';
//		 Plc_EmergencyStop:=FALSE;
//	 END_IF
//END_IF 
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_PowerOff_ChA" Id="{ecc6e8c0-4160-45d3-93c8-aa6ad473bcaa}" FolderPath="Set\">
      <Implementation>
        <ST><![CDATA[CASE PowerOff_ChA_State OF
	0:
		//如果电源已经上电，则转下一步
		IF st_Power_ChA THEN
			PowerOff_ChA_State:=1;
		ELSE
			PowerOff_ChA_State:=88;
		END_IF
	1:
		IF btn_PowerOff_ChA THEN
			PowerOff_ChA_TON.IN:=TRUE;//开始计时
			IF PowerOff_ChA_TON.Q THEN
				PowerOff_ChA_State:=2;
			END_IF
		END_IF
	2:
		//对寄存器置下降沿，恢复寄存器原始状态，方便下次操作
		btn_PowerOff_ChA_ResetRegs:=TRUE;
		PowerOff_ChA_TON.IN:=FALSE;
		btn_PowerOff_ChA:=FALSE;
		PowerOff_ChA_State:=88;
	88:
		btn_PowerOff_ChA_ResetRegs:=FALSE;
		PowerOff_ChA_State:=0;
END_CASE

////功能块
PowerOff_ChA_TON(PT:=T#1S);
fb_PowerOff_ChA(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=PowerOff_ChA_MBAddr , 
	cbLength:= SIZEOF(PowerOff_ChARegs), 
	pSrcAddr:= ADR(PowerOff_ChARegs), 
	bExecute:= btn_PowerOff_ChA, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );
fb_PowerOff_ChA_ResetReg(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=PowerOff_ChA_MBAddr, 
	cbLength:= SIZEOF(PowerOff_ChA_ResetRegs), 
	pSrcAddr:= ADR(PowerOff_ChA_ResetRegs), 
	bExecute:= btn_PowerOff_ChA_ResetRegs, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_PowerOff_ChB" Id="{b378967a-3209-4ce2-b73a-66959c143540}" FolderPath="Set\">
      <Implementation>
        <ST><![CDATA[CASE PowerOff_ChB_State OF
	0:
		//如果电源已经上电，则转下一步
		IF st_Power_ChB THEN
			PowerOff_ChB_State:=1;
		ELSE
			PowerOff_ChB_State:=88;
		END_IF
	1:
		IF btn_PowerOff_ChB THEN
			PowerOff_ChB_TON.IN:=TRUE;//开始计时
			IF PowerOff_ChB_TON.Q THEN
				PowerOff_ChB_State:=2;
			END_IF
		END_IF
	2:
		//对寄存器置下降沿，恢复寄存器原始状态，方便下次操作
		btn_PowerOff_ChB_ResetRegs:=TRUE;
		PowerOff_ChB_TON.IN:=FALSE;
		btn_PowerOff_ChB:=FALSE;
		PowerOff_ChB_State:=88;
	88:
		btn_PowerOff_ChB_ResetRegs:=FALSE;
		PowerOff_ChB_State:=0;
END_CASE

////功能块
PowerOff_ChB_TON(PT:=T#1S);
fb_PowerOff_ChB(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=PowerOff_ChB_MBAddr , 
	cbLength:= SIZEOF(PowerOff_ChBRegs), 
	pSrcAddr:= ADR(PowerOff_ChBRegs), 
	bExecute:= btn_PowerOff_ChB, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );
fb_PowerOff_ChB_ResetReg(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=PowerOff_ChB_MBAddr, 
	cbLength:= SIZEOF(PowerOff_ChB_ResetRegs), 
	pSrcAddr:= ADR(PowerOff_ChB_ResetRegs), 
	bExecute:= btn_PowerOff_ChB_ResetRegs, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_PowerOn_ChA" Id="{f8ccf2f7-8521-404c-bc6e-4d5a4e16e524}" FolderPath="Set\">
      <Implementation>
        <ST><![CDATA[CASE PowerOn_ChA_State OF
	0:
		//如果电源未上电，转下一步
		IF NOT st_Power_ChA THEN
			PowerOn_ChA_State:=1;
		END_IF

	1:
		IF btn_PowerOn_ChA THEN		//PLC上电指令
			//回读电源设定值，如果不为0，需要先置零
			IF GetSetCurrent_ChA<>0 THEN
				SetCurrent_ChA:=0;
				btn_SetCurrent_ChA:=TRUE;
			ELSE
				PowerOn_ChA_TON2.IN:=TRUE;
				IF PowerOn_ChA_TON2.Q THEN
					PowerOn_ChA_State:=2;//清零后稍微延迟一下再进入下一步上电过程
				END_IF
			END_IF
		END_IF
	2:
		btn_SetCurrent_ChA:=FALSE;
		PowerOn_ChA_TON2.IN:=FALSE;
		fb_PowerOn_ChA.bExecute:=TRUE;//功能块上电
		PowerOn_ChA_TON.IN:=TRUE;//开始计时
		IF PowerOn_ChA_TON.Q THEN
				PowerOn_ChA_State:=3;
		END_IF
	3:
		//对寄存器置下降沿，恢复寄存器原始状态，方便下次操作
		fb_PowerOn_ChA.bExecute:=FALSE;
		btn_PowerOn_ChA_ResetRegs:=TRUE;
		PowerOn_ChA_TON.IN:=FALSE;
		btn_PowerOn_ChA:=FALSE;
		PowerOn_ChA_State:=88;
	88:
		btn_PowerOn_ChA_ResetRegs:=FALSE;
		PowerOn_ChA_State:=0;
END_CASE

////功能块
PowerOn_ChA_TON(PT:=T#1S);
PowerOn_ChA_TON2(PT:=T#0.1S);
fb_PowerOn_ChA(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=PowerOn_ChA_MBAddr , 
	cbLength:= SIZEOF(PowerOn_ChARegs), 
	pSrcAddr:= ADR(PowerOn_ChARegs), 
	bExecute:= , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );
fb_PowerOn_ChA_ResetReg(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=PowerOn_ChA_MBAddr , 
	cbLength:= SIZEOF(PowerOn_ChA_ResetRegs), 
	pSrcAddr:= ADR(PowerOn_ChA_ResetRegs), 
	bExecute:= btn_PowerOn_ChA_ResetRegs, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_PowerOn_ChB" Id="{d0345d71-f09b-4c53-8975-56a2085341e8}" FolderPath="Set\">
      <Implementation>
        <ST><![CDATA[CASE PowerOn_ChB_State OF
	0:
		//如果电源未上电，转下一步
		IF NOT st_Power_ChB THEN
			PowerOn_ChB_State:=1;
		END_IF

	1:
		IF btn_PowerOn_ChB THEN		//PLC上电指令
			//回读电源设定值，如果不为0，需要先置零
			IF GetSetCurrent_ChB<>0 THEN
				SetCurrent_ChB:=0;
				btn_SetCurrent_ChB:=TRUE;
			ELSE
				PowerOn_ChB_TON2.IN:=TRUE;
				IF PowerOn_ChB_TON2.Q THEN
					PowerOn_ChB_State:=2;//清零后稍微延迟一下再进入下一步上电过程
				END_IF
			END_IF
		END_IF
	2:
		btn_SetCurrent_ChB:=FALSE;
		PowerOn_ChB_TON2.IN:=FALSE;
		fb_PowerOn_ChB.bExecute:=TRUE;//功能块上电
		PowerOn_ChB_TON.IN:=TRUE;//开始计时
		IF PowerOn_ChB_TON.Q THEN
				PowerOn_ChB_State:=3;
		END_IF
	3:
		//对寄存器置下降沿，恢复寄存器原始状态，方便下次操作
		fb_PowerOn_ChB.bExecute:=FALSE;
		btn_PowerOn_ChB_ResetRegs:=TRUE;
		PowerOn_ChB_TON.IN:=FALSE;
		btn_PowerOn_ChB:=FALSE;
		PowerOn_ChB_State:=88;
	88:
		btn_PowerOn_ChB_ResetRegs:=FALSE;
		PowerOn_ChB_State:=0;
END_CASE

////功能块
PowerOn_ChB_TON(PT:=T#1S);
PowerOn_ChB_TON2(PT:=T#0.1S);
fb_PowerOn_ChB(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=PowerOn_ChB_MBAddr , 
	cbLength:= SIZEOF(PowerOn_ChBRegs), 
	pSrcAddr:= ADR(PowerOn_ChBRegs), 
	bExecute:= , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );
fb_PowerOn_ChB_ResetReg(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=PowerOn_ChB_MBAddr , 
	cbLength:= SIZEOF(PowerOn_ChB_ResetRegs), 
	pSrcAddr:= ADR(PowerOn_ChB_ResetRegs), 
	bExecute:= btn_PowerOn_ChB_ResetRegs, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Reset_ChA" Id="{8f8582ac-7ef5-48e4-8a5d-f6e8c6c4a8db}" FolderPath="Set\">
      <Implementation>
        <ST><![CDATA[CASE Reset_ChA_State OF
	0:
		IF btn_Reset_ChA THEN
			Reset_ChA_State:=1;
		END_IF
	1:
		fb_Reset_ChA.bExecute:=TRUE;//功能块上电
		Reset_ChA_TON.IN:=TRUE;//开始计时
		IF Reset_ChA_TON.Q THEN
				Reset_ChA_State:=2;
		END_IF
	2:
		//对寄存器置下降沿，恢复寄存器原始状态，方便下次操作
		fb_Reset_ChA.bExecute:=FALSE;
		btn_Reset_ChA_ResetRegs:=TRUE;
		Reset_ChA_TON.IN:=FALSE;
		btn_Reset_ChA:=FALSE;
		Reset_ChA_State:=88;
	88:
		btn_Reset_ChA_ResetRegs:=FALSE;
		Reset_ChA_State:=0;
END_CASE

////功能块
Reset_ChA_TON(PT:=T#0.1S);
fb_Reset_ChA(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=Reset_ChA_MBAddr , 
	cbLength:= SIZEOF(Reset_ChARegs), 
	pSrcAddr:= ADR(Reset_ChARegs), 
	bExecute:= , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );
fb_Reset_ChA_ResetReg(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=Reset_ChA_MBAddr , 
	cbLength:= SIZEOF(Reset_ChA_ResetRegs), 
	pSrcAddr:= ADR(Reset_ChA_ResetRegs), 
	bExecute:= btn_Reset_ChA_ResetRegs, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Reset_ChB" Id="{04e0cb7c-8334-4e14-8ddc-aaa5c53f1006}" FolderPath="Set\">
      <Implementation>
        <ST><![CDATA[CASE Reset_ChB_State OF
	0:
		IF btn_Reset_ChB THEN
			Reset_ChB_State:=1;
		END_IF
	1:
		fb_Reset_ChB.bExecute:=TRUE;//功能块上电
		Reset_ChB_TON.IN:=TRUE;//开始计时
		IF Reset_ChB_TON.Q THEN
				Reset_ChB_State:=2;
		END_IF
	2:
		//对寄存器置下降沿，恢复寄存器原始状态，方便下次操作
		fb_Reset_ChB.bExecute:=FALSE;
		btn_Reset_ChB_ResetRegs:=TRUE;
		Reset_ChB_TON.IN:=FALSE;
		btn_Reset_ChB:=FALSE;
		Reset_ChB_State:=88;
	88:
		btn_Reset_ChB_ResetRegs:=FALSE;
		Reset_ChB_State:=0;
END_CASE

////功能块
Reset_ChB_TON(PT:=T#0.1S);
fb_Reset_ChB(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=Reset_ChB_MBAddr , 
	cbLength:= SIZEOF(Reset_ChBRegs), 
	pSrcAddr:= ADR(Reset_ChBRegs), 
	bExecute:= , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );
fb_Reset_ChB_ResetReg(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=1 , 
	nMBAddr:=Reset_ChB_MBAddr , 
	cbLength:= SIZEOF(Reset_ChB_ResetRegs), 
	pSrcAddr:= ADR(Reset_ChB_ResetRegs), 
	bExecute:= btn_Reset_ChB_ResetRegs, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_SetCurrent_ChA" Id="{992daac6-1bcd-4b44-82e1-d012e0157f1f}" FolderPath="Set\">
      <Implementation>
        <ST><![CDATA[//IEEE754转化,REAL到WORD
ieee754_SetCurrent_ChA.data_float:=SetCurrent_ChA;
SetCurrent_ChARegs[0]:=ieee754_SetCurrent_ChA.data_word[0];
SetCurrent_ChARegs[1]:=ieee754_SetCurrent_ChA.data_word[1];
//字节调换，转为电源规定的格式
SetCurrent_ChARegs_LowByte[0]:=SHL((SetCurrent_ChARegs[0] AND 16#00FF),8);
SetCurrent_ChARegs_HighByte[0]:=SHR((SetCurrent_ChARegs[0] AND 16#FF00),8);
SetCurrent_ChARegs_PSProtocal[0]:=SetCurrent_ChARegs_LowByte[0] OR SetCurrent_ChARegs_HighByte[0];
SetCurrent_ChARegs_LowByte[1]:=SHL((SetCurrent_ChARegs[1] AND 16#00FF),8);
SetCurrent_ChARegs_HighByte[1]:=SHR((SetCurrent_ChARegs[1] AND 16#FF00),8);
SetCurrent_ChARegs_PSProtocal[1]:=SetCurrent_ChARegs_LowByte[1] OR SetCurrent_ChARegs_HighByte[1];

CASE SetCurrent_ChA_State OF
	0:
		//电源上电了才转下一步
		IF  st_Power_ChA THEN
			SetCurrent_ChA_State:=1;
		END_IF
	1:
		IF btn_SetCurrent_ChA THEN		//设置电流
			SetCurrent_ChA_TON.IN:=TRUE;//开始计时
			IF SetCurrent_ChA_TON.Q THEN
				SetCurrent_ChA_State:=88;
			END_IF
		END_IF
	88:
		//恢复变量状态
		SetCurrent_ChA_TON.IN:=FALSE;
		btn_SetCurrent_ChA:=FALSE;
		SetCurrent_ChA_State:=0;
END_CASE


////功能块
SetCurrent_ChA_TON(PT:=T#0.02S);
fb_SetCurrent_ChA(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=2 , 
	nMBAddr:=SetCurrent_ChA_MBAddr , 
	cbLength:= SIZEOF(SetCurrent_ChARegs_PSProtocal), 
	pSrcAddr:= ADR(SetCurrent_ChARegs_PSProtocal), 
	bExecute:= btn_SetCurrent_ChA, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_SetCurrent_ChB" Id="{b3b4743c-bb29-4bbe-8fa8-ba5caf6e27a0}" FolderPath="Set\">
      <Implementation>
        <ST><![CDATA[//IEEE754转化,REAL到WORD
ieee754_SetCurrent_ChB.data_float:=SetCurrent_ChB;
SetCurrent_ChBRegs[0]:=ieee754_SetCurrent_ChB.data_word[0];
SetCurrent_ChBRegs[1]:=ieee754_SetCurrent_ChB.data_word[1];
//字节调换，转为电源规定的格式
SetCurrent_ChBRegs_LowByte[0]:=SHL((SetCurrent_ChBRegs[0] AND 16#00FF),8);
SetCurrent_ChBRegs_HighByte[0]:=SHR((SetCurrent_ChBRegs[0] AND 16#FF00),8);
SetCurrent_ChBRegs_PSProtocal[0]:=SetCurrent_ChBRegs_LowByte[0] OR SetCurrent_ChBRegs_HighByte[0];
SetCurrent_ChBRegs_LowByte[1]:=SHL((SetCurrent_ChBRegs[1] AND 16#00FF),8);
SetCurrent_ChBRegs_HighByte[1]:=SHR((SetCurrent_ChBRegs[1] AND 16#FF00),8);
SetCurrent_ChBRegs_PSProtocal[1]:=SetCurrent_ChBRegs_LowByte[1] OR SetCurrent_ChBRegs_HighByte[1];

CASE SetCurrent_ChB_State OF
	0:
		//电源上电了才转下一步
		IF  st_Power_ChB THEN
			SetCurrent_ChB_State:=1;
		END_IF
	1:
		IF btn_SetCurrent_ChB THEN		//设置电流
			SetCurrent_ChB_TON.IN:=TRUE;//开始计时
			IF SetCurrent_ChB_TON.Q THEN
				SetCurrent_ChB_State:=88;
			END_IF
		END_IF
	88:
		//恢复变量状态
		SetCurrent_ChB_TON.IN:=FALSE;
		btn_SetCurrent_ChB:=FALSE;
		SetCurrent_ChB_State:=0;
END_CASE


////功能块
SetCurrent_ChB_TON(PT:=T#1S);
fb_SetCurrent_ChB(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=2 , 
	nMBAddr:=SetCurrent_ChB_MBAddr , 
	cbLength:= SIZEOF(SetCurrent_ChBRegs_PSProtocal), 
	pSrcAddr:= ADR(SetCurrent_ChBRegs_PSProtocal), 
	bExecute:= btn_SetCurrent_ChB, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_SetRampingSpd_ChA" Id="{52937ce6-602d-490e-a8ac-60c571e74064}" FolderPath="Set\">
      <Implementation>
        <ST><![CDATA[//IEEE754转化,REAL到WORD
ieee754_SetRampingSpd_ChA.data_float:=SetRampingSpd_ChA;
SetRampingSpd_ChARegs[0]:=ieee754_SetRampingSpd_ChA.data_word[0];
SetRampingSpd_ChARegs[1]:=ieee754_SetRampingSpd_ChA.data_word[1];
//字节调换，转为电源规定的格式
SetRampingSpd_ChARegs_LowByte[0]:=SHL((SetRampingSpd_ChARegs[0] AND 16#00FF),8);
SetRampingSpd_ChARegs_HighByte[0]:=SHR((SetRampingSpd_ChARegs[0] AND 16#FF00),8);
SetRampingSpd_ChARegs_PSProtocal[0]:=SetRampingSpd_ChARegs_LowByte[0] OR SetRampingSpd_ChARegs_HighByte[0];
SetRampingSpd_ChARegs_LowByte[1]:=SHL((SetRampingSpd_ChARegs[1] AND 16#00FF),8);
SetRampingSpd_ChARegs_HighByte[1]:=SHR((SetRampingSpd_ChARegs[1] AND 16#FF00),8);
SetRampingSpd_ChARegs_PSProtocal[1]:=SetRampingSpd_ChARegs_LowByte[1] OR SetRampingSpd_ChARegs_HighByte[1];

CASE SetRampingSpd_ChA_State OF
	0:
		//电源上电了才转下一步
		IF  st_Power_ChA THEN
			SetRampingSpd_ChA_State:=1;
		END_IF
	1:
		IF btn_SetRampingSpd_ChA THEN		//设置电流
			SetRampingSpd_ChA_TON.IN:=TRUE;//开始计时
			IF SetRampingSpd_ChA_TON.Q THEN
				SetRampingSpd_ChA_State:=88;
			END_IF
		END_IF
	88:
		//恢复变量状态
		SetRampingSpd_ChA_TON.IN:=FALSE;
		btn_SetRampingSpd_ChA:=FALSE;
		SetRampingSpd_ChA_State:=0;
END_CASE


////功能块
SetRampingSpd_ChA_TON(PT:=T#1S);
fb_SetRampingSpd_ChA(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=2 , 
	nMBAddr:=SetRampingSpd_ChA_MBAddr , 
	cbLength:= SIZEOF(SetRampingSpd_ChARegs_PSProtocal), 
	pSrcAddr:= ADR(SetRampingSpd_ChARegs_PSProtocal), 
	bExecute:= btn_SetRampingSpd_ChA, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_SetRampingSpd_ChB" Id="{ed80512c-ebaa-4ad4-8a1a-471148c77f45}" FolderPath="Set\">
      <Implementation>
        <ST><![CDATA[//IEEE754转化,REAL到WORD
ieee754_SetRampingSpd_ChB.data_float:=SetRampingSpd_ChB;
SetRampingSpd_ChBRegs[0]:=ieee754_SetRampingSpd_ChB.data_word[0];
SetRampingSpd_ChBRegs[1]:=ieee754_SetRampingSpd_ChB.data_word[1];
//字节调换，转为电源规定的格式
SetRampingSpd_ChBRegs_LowByte[0]:=SHL((SetRampingSpd_ChBRegs[0] AND 16#00FF),8);
SetRampingSpd_ChBRegs_HighByte[0]:=SHR((SetRampingSpd_ChBRegs[0] AND 16#FF00),8);
SetRampingSpd_ChBRegs_PSProtocal[0]:=SetRampingSpd_ChBRegs_LowByte[0] OR SetRampingSpd_ChBRegs_HighByte[0];
SetRampingSpd_ChBRegs_LowByte[1]:=SHL((SetRampingSpd_ChBRegs[1] AND 16#00FF),8);
SetRampingSpd_ChBRegs_HighByte[1]:=SHR((SetRampingSpd_ChBRegs[1] AND 16#FF00),8);
SetRampingSpd_ChBRegs_PSProtocal[1]:=SetRampingSpd_ChBRegs_LowByte[1] OR SetRampingSpd_ChBRegs_HighByte[1];

CASE SetRampingSpd_ChB_State OF
	0:
		//电源上电了才转下一步
		IF  st_Power_ChB THEN
			SetRampingSpd_ChB_State:=1;
		END_IF
	1:
		IF btn_SetRampingSpd_ChB THEN		//设置电流
			SetRampingSpd_ChB_TON.IN:=TRUE;//开始计时
			IF SetRampingSpd_ChB_TON.Q THEN
				SetRampingSpd_ChB_State:=88;
			END_IF
		END_IF
	88:
		//恢复变量状态
		SetRampingSpd_ChB_TON.IN:=FALSE;
		btn_SetRampingSpd_ChB:=FALSE;
		SetRampingSpd_ChB_State:=0;
END_CASE


////功能块
SetRampingSpd_ChB_TON(PT:=T#1S);
fb_SetRampingSpd_ChB(
	sIPAddr:= IPAddr, 
	nTCPPort:= TCPPort, 
	nUnitID:= 1, 
	nQuantity:=2 , 
	nMBAddr:=SetRampingSpd_ChB_MBAddr , 
	cbLength:= SIZEOF(SetRampingSpd_ChBRegs_PSProtocal), 
	pSrcAddr:= ADR(SetRampingSpd_ChBRegs_PSProtocal), 
	bExecute:= btn_SetRampingSpd_ChB, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="PS2">
      <LineId Id="528" Count="0" />
      <LineId Id="521" Count="1" />
      <LineId Id="526" Count="0" />
      <LineId Id="524" Count="1" />
      <LineId Id="527" Count="0" />
      <LineId Id="523" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="556" Count="2" />
      <LineId Id="554" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="562" Count="0" />
      <LineId Id="559" Count="2" />
      <LineId Id="553" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="869" Count="5" />
      <LineId Id="868" Count="0" />
      <LineId Id="563" Count="3" />
      <LineId Id="584" Count="1" />
      <LineId Id="568" Count="0" />
      <LineId Id="1205" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="1206" Count="0" />
      <LineId Id="1216" Count="0" />
      <LineId Id="1215" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_AutoMode_ChA">
      <LineId Id="1" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="3" />
      <LineId Id="60" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="76" Count="5" />
      <LineId Id="75" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="12" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="82" Count="2" />
      <LineId Id="90" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="91" Count="2" />
      <LineId Id="88" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="100" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="52" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_AutoMode_ChB">
      <LineId Id="1" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="3" />
      <LineId Id="60" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="76" Count="5" />
      <LineId Id="75" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="12" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="82" Count="2" />
      <LineId Id="90" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="91" Count="2" />
      <LineId Id="88" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="100" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="52" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_GetCurrent_ChA">
      <LineId Id="43" Count="0" />
      <LineId Id="74" Count="9" />
      <LineId Id="18" Count="0" />
      <LineId Id="85" Count="6" />
      <LineId Id="16" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="60" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_GetCurrent_ChB">
      <LineId Id="43" Count="0" />
      <LineId Id="74" Count="9" />
      <LineId Id="18" Count="0" />
      <LineId Id="85" Count="6" />
      <LineId Id="16" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="60" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_GetPSStatus">
      <LineId Id="12" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="13" Count="4" />
      <LineId Id="24" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="151" Count="5" />
      <LineId Id="99" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="103" Count="12" />
      <LineId Id="135" Count="14" />
      <LineId Id="134" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="165" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="73" Count="12" />
      <LineId Id="72" Count="0" />
      <LineId Id="94" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_GetPSVersion">
      <LineId Id="12" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="13" Count="4" />
      <LineId Id="24" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="105" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="73" Count="12" />
      <LineId Id="72" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_GetRampSpd_ChA">
      <LineId Id="43" Count="0" />
      <LineId Id="74" Count="9" />
      <LineId Id="18" Count="0" />
      <LineId Id="85" Count="6" />
      <LineId Id="16" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="60" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_GetRampSpd_ChB">
      <LineId Id="43" Count="0" />
      <LineId Id="74" Count="9" />
      <LineId Id="18" Count="0" />
      <LineId Id="85" Count="6" />
      <LineId Id="16" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="60" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_GetSetCurrent_ChA">
      <LineId Id="97" Count="39" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_GetSetCurrent_ChB">
      <LineId Id="99" Count="37" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_GetVoltage_ChA">
      <LineId Id="98" Count="39" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_GetVoltage_ChB">
      <LineId Id="98" Count="39" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_InitRecipeParameters">
      <LineId Id="78" Count="5" />
      <LineId Id="40" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="59" Count="3" />
      <LineId Id="66" Count="1" />
      <LineId Id="84" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="74" Count="2" />
      <LineId Id="73" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="52" Count="5" />
      <LineId Id="8" Count="3" />
      <LineId Id="32" Count="0" />
      <LineId Id="37" Count="2" />
      <LineId Id="33" Count="1" />
      <LineId Id="1" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_PowerOff_ChA">
      <LineId Id="14" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="49" Count="3" />
      <LineId Id="78" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="80" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="2" Count="11" />
      <LineId Id="1" Count="0" />
      <LineId Id="59" Count="11" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_PowerOff_ChB">
      <LineId Id="14" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="49" Count="3" />
      <LineId Id="78" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="80" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="2" Count="11" />
      <LineId Id="1" Count="0" />
      <LineId Id="59" Count="11" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_PowerOn_ChA">
      <LineId Id="14" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="106" Count="4" />
      <LineId Id="121" Count="0" />
      <LineId Id="123" Count="2" />
      <LineId Id="105" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="113" Count="2" />
      <LineId Id="112" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="2" Count="11" />
      <LineId Id="1" Count="0" />
      <LineId Id="59" Count="11" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_PowerOn_ChB">
      <LineId Id="14" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="106" Count="4" />
      <LineId Id="121" Count="0" />
      <LineId Id="123" Count="2" />
      <LineId Id="105" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="113" Count="2" />
      <LineId Id="112" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="2" Count="11" />
      <LineId Id="1" Count="0" />
      <LineId Id="59" Count="11" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_Reset_ChA">
      <LineId Id="14" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="113" Count="2" />
      <LineId Id="112" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="2" Count="11" />
      <LineId Id="1" Count="0" />
      <LineId Id="59" Count="11" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_Reset_ChB">
      <LineId Id="14" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="113" Count="2" />
      <LineId Id="112" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="2" Count="11" />
      <LineId Id="1" Count="0" />
      <LineId Id="59" Count="11" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_SetCurrent_ChA">
      <LineId Id="50" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="72" Count="2" />
      <LineId Id="78" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="23" Count="10" />
      <LineId Id="35" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="2" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_SetCurrent_ChB">
      <LineId Id="50" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="72" Count="2" />
      <LineId Id="78" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="23" Count="10" />
      <LineId Id="35" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="2" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_SetRampingSpd_ChA">
      <LineId Id="50" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="72" Count="2" />
      <LineId Id="78" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="23" Count="10" />
      <LineId Id="35" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="2" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PS2.A_SetRampingSpd_ChB">
      <LineId Id="50" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="72" Count="2" />
      <LineId Id="78" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="23" Count="10" />
      <LineId Id="35" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="2" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>